package com.lamniscate.pantheon;


import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.documentfile.provider.DocumentFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashSet;
import java.util.Set;

import com.airbnb.lottie.LottieAnimationView;


public class MalwareDetectionActivity extends AppCompatActivity {

    private LottieAnimationView malwareDetectionAnimationView;
    //private boolean isMalwareDetected = false;
    private static final int REQUEST_CODE_PERMISSION = 101;
    private static final int REQUEST_CODE_STORAGE_PERMISSION = 1001;
    private TextView scanResultTextView;
    private Uri selectedFileUri;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_malware_detection);

        // Initialize views
        Button selectFolderButton = findViewById(R.id.selectFolderButton);
        Button scanButton = findViewById(R.id.scanButton);
        scanResultTextView = findViewById(R.id.scanResultTextView);

        // Request permission to access external storage
        requestPermission();

        // Initialize views

        malwareDetectionAnimationView = findViewById(R.id.malwareDetectionAnimationView);

        // Set default animation
        setNormalAnimation();

        // Set click listeners
        selectFolderButton.setOnClickListener(v -> selectFile());
        scanButton.setOnClickListener(v -> scanForMalware());
    }
    private void setNormalAnimation() {

        malwareDetectionAnimationView.setAnimation(R.raw.search);
        malwareDetectionAnimationView.playAnimation();
    }

    private void setMalwareDetectedAnimation() {

        malwareDetectionAnimationView.setAnimation(R.raw.warning);
        malwareDetectionAnimationView.playAnimation();
    }

    private void setSafeAnimation() {

        malwareDetectionAnimationView.setAnimation(R.raw.safe);
        malwareDetectionAnimationView.playAnimation();
    }

    private void requestPermission() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_CODE_PERMISSION);
        }
    }

    private final ActivityResultLauncher<Intent> filePickerLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == Activity.RESULT_OK) {
                    Intent data = result.getData();
                    if (data != null) {
                        selectedFileUri = data.getData();
                        if (selectedFileUri != null) {
                            scanResultTextView.setText("Selected file: " + selectedFileUri.toString());
                        }
                    }
                }
            });

    private void selectFile() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                == PackageManager.PERMISSION_GRANTED) {
            Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
            intent.addCategory(Intent.CATEGORY_OPENABLE);
            intent.setType("*/*"); // Allow all file types
            filePickerLauncher.launch(intent);
        } else {
            Toast.makeText(this, "Permission required to select file", Toast.LENGTH_SHORT).show();
        }
    }

    private void scanForMalware() {
        if (selectedFileUri == null) {
            Toast.makeText(this, "Please select a file to scan", Toast.LENGTH_SHORT).show();
            return;
        }
        //scanResultTextView.append("\nProceed for Malware Scan...");
        Toast.makeText(this, "proceeding to scan malware", Toast.LENGTH_SHORT).show();
        try {
            InputStream inputStream = getContentResolver().openInputStream(selectedFileUri);
            if (inputStream != null) {
                //scanResultTextView.append("\nComputing File Hash...");
                Toast.makeText(this, "computing file hash...", Toast.LENGTH_SHORT).show();
                String fileHash = computeFileHash(inputStream);
                if (fileHash != null) {
                    scanResultTextView.append("File hash: " + fileHash);
                    detectMalware(fileHash);
                } else {
                    Toast.makeText(this, "Error computing file hash", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(this, "Error opening file", Toast.LENGTH_SHORT).show();
            }
        } catch (IOException e) {
            e.printStackTrace();
            Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
        }
    }

    private String computeFileHash(InputStream inputStream) {
        //scanResultTextView.append("\ninitializing file hash computing...");
        Toast.makeText(this, "computing file hash initialization", Toast.LENGTH_SHORT).show();
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] buffer = new byte[8192];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                digest.update(buffer, 0, bytesRead);
            }
            inputStream.close();
            byte[] hashBytes = digest.digest();

            StringBuilder sb = new StringBuilder();
            for (byte b : hashBytes) {
                sb.append(String.format("%02x", b));
            }
            //scanResultTextView.append("\nfile hash computed Successfully");
            Toast.makeText(this, "hash computed successfully...", Toast.LENGTH_SHORT).show();
            Toast.makeText(this, "hash:"+sb.toString(), Toast.LENGTH_SHORT).show();
            return sb.toString();
        } catch (IOException | NoSuchAlgorithmException e) {
            e.printStackTrace();
            Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
            return null;
        }
    }

    private void detectMalware(String fileHash) {
        // Open your SQLite database and retrieve the hash values stored in the database
        //scanResultTextView.append("\nInitializing Malware Signature Database");
        Toast.makeText(this, "initialize malware signature db..", Toast.LENGTH_SHORT).show();
        Set<String> malwareHashes = getMalwareHashes(); // Retrieve hash values from the database
        //comparing hashes
        //scanResultTextView.append("\ncomparing Hashes...");
        Toast.makeText(this, "comparing hashes with db signature", Toast.LENGTH_SHORT).show();
        if (malwareHashes.contains(fileHash)) {
            setMalwareDetectedAnimation();
            Toast.makeText(this, "malware detected", Toast.LENGTH_SHORT).show();
            scanResultTextView.setText("\nMalware Detected!");
            scanResultTextView.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark));
            showRemoveThreatDialog();
        } else {
            setSafeAnimation();
            Toast.makeText(this, "safe", Toast.LENGTH_SHORT).show();
            scanResultTextView.setText("\nNo Malware Detected");
            scanResultTextView.setTextColor(ContextCompat.getColor(this, android.R.color.holo_green_dark));
        }
    }

    private void showRemoveThreatDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Malware Detected!!!");
        builder.setMessage("Do you want to fix this issue?");
        builder.setPositiveButton("Remove Threat", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // User clicked Remove Threat, delete the malware file
                deleteMalwareFile();
            }
        });
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // User clicked Cancel, do nothing
                dialog.dismiss();
            }
        });
        AlertDialog dialog = builder.create();
        dialog.show();
    }

    private void deleteMalwareFile() {
        if (selectedFileUri == null) {
            Toast.makeText(this, "Invalid file path", Toast.LENGTH_SHORT).show();
            return;
        }

        DocumentFile documentFile = DocumentFile.fromSingleUri(this, selectedFileUri);
        if (documentFile != null && documentFile.exists()) {
            boolean deleted = documentFile.delete();
            if (deleted) {
                setNormalAnimation();
                scanResultTextView.append("\nMalware deleted Successfully!");
                Toast.makeText(this, "Malware file deleted successfully", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Failed to delete malware file", Toast.LENGTH_SHORT).show();
            }
        } else {
            Toast.makeText(this, "Invalid file path", Toast.LENGTH_SHORT).show();
        }
    }


    private Set<String> getMalwareHashes() {
        Toast.makeText(this, "db initialization", Toast.LENGTH_SHORT).show();
        Set<String> malwareHashes = new HashSet<>();

        // Get a reference to the resources
        Resources res = getResources();

        // Copy the database from res/raw to app's internal storage if it doesn't exist
        String dbPath = getDatabasePath("malwaresignature.db").getPath();

        //Toast.makeText(this, "dbpath:"+dbPath, Toast.LENGTH_SHORT).show();
        if (!new File(dbPath).exists()) {
            try {
                InputStream inputStream = res.openRawResource(R.raw.malwaresignature);
                OutputStream outputStream = new FileOutputStream(dbPath);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = inputStream.read(buffer)) > 0) {
                    outputStream.write(buffer, 0, length);
                }
                outputStream.flush();
                outputStream.close();
                inputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Open a connection to the SQLite database
        SQLiteDatabase db = SQLiteDatabase.openDatabase(dbPath, null, SQLiteDatabase.OPEN_READONLY);

        // Perform a query to retrieve hash values from the database
        Cursor cursor = db.rawQuery("SELECT Hash FROM MalwareSignatures", null);
        if (cursor != null && cursor.moveToFirst()) {
            do {
                @SuppressLint("Range") String hash = cursor.getString(cursor.getColumnIndex("Hash"));
                malwareHashes.add(hash);
            } while (cursor.moveToNext());
            cursor.close();
        }

        // Close the database connection
        db.close();
        //scanResultTextView.append("\nMalware Signature Retrived Successfully...");
        Toast.makeText(this, "db hash retrived successfully", Toast.LENGTH_SHORT).show();
        return malwareHashes;
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (requestCode == REQUEST_CODE_STORAGE_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Permission granted", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Permission denied", Toast.LENGTH_SHORT).show();
            }
        }
    }
}
